/* Ledger that associate the token ids created in the contract with their owner. 
Strings (link to resource, the certificate) mapped to addresses. */
type ledger = big_map<string, address>;

/* Possible parameters */
type parameter =
| ["Mint", string]
| ["None"];

let sender_address = Tezos.get_source();     // Source address.

/* Implement this later. */
/* /* exists, checks if a resource has already been minted. */
let exists = (sender_address: address, resource: string) => {
  return match(ledger.find_opt (address, resource), {
   Some: move => move,
   None: () => failwith("NFT has not already been minted.")
  });
}; */

/* mint, adds to ledger <resource, source address> */
const mint = (resource: string, sender_address: address): return_ => ledger.add(resource, sender_address);



//* Main and return functions *//

/* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. */
const main = (action: parameter, resource: string) : [ list<operation> , storage ] => {
 return [
   list([]),    // No operations
   (match (action, {
    Mint: n => mint(resource, sender_address),
    None:     ()  => 0}))
  ]
};

/* Returns the updated ledger */
type return_ = [list<operation>, ledger];
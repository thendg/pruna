/* Ledger that associate the token ids created in the contract with their owner. 
Addresses mapped to string (link to resource, the certificate). */
type ledger = big_map<address, string>;

/* Possible parameters */
type parameter =
| ["Mint", string]
| ["None"];

let sender_address = Tezos.get_source();     // Source address.




/* mint, adds to ledger <source address, resource> */
const mint = (sender_address: address, resource: string): return_ => ledger.update(address, resource);



//* Main and return functions *//

/* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. */
const main = (action: parameter, resource: string) : [ list<operation> , storage ] => {
 return [
   list([]),    // No operations
   (match (action, {
    Mint: n => mint(sender_address, resource),
    None:     ()  => 0}))
  ]
};

/* Returns the updated ledger */
type return_ = [list<operation>, ledger];